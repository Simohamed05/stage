import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import io
import numpy as np
from statsmodels.tsa.arima.model import ARIMA
from scipy import stats
import warnings
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import plotly.io as pio

# Supprimer les avertissements pour un affichage plus propre
warnings.filterwarnings("ignore")

# Configuration de la page Streamlit
st.set_page_config(page_title="Tableau de bord des achats", layout="wide", initial_sidebar_state="expanded")

# CSS personnalis√© pour le th√®me sombre
st.markdown("""
    <style>
    .main { background-color: #1e1e1e; color: #ffffff; }
    h1, h2, h3 { color: #ffffff; }
    .stDataFrame { background-color: #2d2d2d; color: #ffffff; }
    .stMetric { background-color: #2d2d2d; padding: 10px; border-radius: 5px; }
    </style>
""", unsafe_allow_html=True)

# Fonction pour abr√©ger les grands nombres
def abbreviate_number(num):
    if num >= 1_000_000:
        return f"{num / 1_000_000:.1f}M"
    if num >= 1_000:
        return f"{num / 1_000:.1f}K"
    return f"{num:.2f}"

# Fonction pour sauvegarder un graphique Plotly en tant qu'image et retourner le chemin
def save_plotly_fig_as_image(fig, filename):
    pio.write_image(fig, filename, format="png")
    return filename

# Fonction pour g√©n√©rer le document Word avec descriptions d√©taill√©es, analyses th√©oriques et images des visualisations
def generate_word_document(selected_category, viz_data):
    doc = Document()
    
    # Titre
    title = doc.add_heading("Documentation du Tableau de Bord des Achats üìä", level=1)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    title.runs[0].font.size = Pt(16)

    # Introduction
    doc.add_heading("Introduction", level=2)
    intro_text = (
        f"Ce document d√©crit le **Tableau de Bord des Achats**, une application interactive d√©velopp√©e pour **CMG Draa-Lasfar** "
        f"afin d‚Äôanalyser les donn√©es d‚Äôachat issues du fichier `demandes_achats.xlsx`. "
        f"Les analyses sont filtr√©es pour la cat√©gorie **{selected_category if selected_category != 'Toutes' else 'toutes les cat√©gories'}**, permettant une exploration cibl√©e des donn√©es. "
        f"Con√ßu pour les employ√©s de Managem, y compris les utilisateurs non techniques, ce tableau de bord fournit des visualisations claires, "
        f"des analyses avanc√©es et des recommandations exploitables pour optimiser la gestion des achats. ‚≠ê\n\n"
        f"Dans le contexte de la gestion des achats, les entreprises comme CMG Draa-Lasfar font face √† des d√©fis tels que la ma√Ætrise des co√ªts, "
        f"la gestion des d√©lais de livraison, et l‚Äôidentification des fournisseurs fiables. Ce tableau de bord r√©pond √† ces enjeux en offrant une vue d‚Äôensemble des d√©penses, "
        f"des performances des fournisseurs, et des tendances de la demande, tout en d√©tectant les anomalies potentielles. "
        f"Les insights g√©n√©r√©s aident √† prendre des d√©cisions strat√©giques, comme n√©gocier avec les fournisseurs cl√©s ou planifier les stocks pour √©viter les ruptures."
    )
    doc.add_paragraph(intro_text)

    # Traitement des Donn√©es
    doc.add_heading("Traitement des Donn√©es üóÇÔ∏è", level=2)
    doc.add_paragraph(
        "Le tableau de bord commence par charger et nettoyer les donn√©es du fichier Excel `demandes_achats.xlsx`. "
        "Cette √©tape est cruciale pour garantir la fiabilit√© des analyses, car les donn√©es brutes peuvent contenir des erreurs, des valeurs manquantes ou des formats incoh√©rents. "
        "Voici les √©tapes d√©taill√©es du traitement :"
    )
    data_steps = [
        ("Chargement des Donn√©es", 
         "Le fichier Excel est lu avec la biblioth√®que Pandas. Les colonnes incluent : `article_desc` (description de l‚Äôarticle), `quantite` (quantit√© command√©e), "
         "`prix_unitaire` (co√ªt par unit√©), `montant` (co√ªt total), `fournisseur` (nom du fournisseur), `date_commande` (date de la commande), "
         "`date_livraison` (date de livraison r√©elle), `date_promesse` (date de livraison promise), `statut_approbation` (statut de la commande), "
         "et `categorie_achat_1` (cat√©gorie d‚Äôachat). Les valeurs vides (ex. : `''`, `'NA'`, `'NaT'`) sont converties en `NaN` pour un traitement coh√©rent."),
        ("Nettoyage des Colonnes", 
         "Les noms de colonnes sont normalis√©s (suppression des espaces, guillemets) pour √©viter les erreurs. Les colonnes num√©riques (`quantite`, `prix_unitaire`, `montant`, etc.) "
         "sont converties en nombres, avec `0` pour les valeurs manquantes. La colonne `categorie_achat_1` est convertie en cha√Ænes de caract√®res, avec `'Inconnu'` pour les valeurs manquantes, "
         "ce qui √©vite les erreurs de type lors du filtrage ou de l‚Äôagr√©gation."),
        ("Traitement des Dates", 
         "Les colonnes de dates (`date_commande`, `date_livraison`, `date_promesse`) sont converties en format `datetime`. Les formats pris en charge incluent `YYYY-MM-DD` (par d√©faut) "
         "et `DD/MM/YYYY` (en secours). Environ 6877 dates valides pour `date_commande` (92%), 4562 pour `date_livraison` (61%), et 6641 pour `date_promesse` (89%) ont √©t√© d√©tect√©es. "
         "Les dates manquantes sont conserv√©es comme `NaT` pour √©viter de fausser les analyses temporelles, comme les d√©lais de livraison ou les tendances des d√©penses."),
        ("Suppression des Lignes Vides", 
         "Les lignes enti√®rement vides sont supprim√©es pour garantir la qualit√© des donn√©es. Cela r√©duit le risque d‚Äôanalyses biais√©es dues √† des enregistrements incomplets.")
    ]
    for title, desc in data_steps:
        doc.add_heading(title, level=3)
        doc.add_paragraph(desc)
    doc.add_paragraph(
        "Un rapport de d√©bogage (`date_debug`) affiche le nombre de dates valides pour chaque colonne, permettant aux utilisateurs de v√©rifier la qualit√© des donn√©es. "
        "Par exemple, un faible pourcentage de `date_livraison` valides (61%) peut limiter les analyses de fiabilit√© des fournisseurs."
    )

    # Visualisations
    doc.add_heading("Visualisations üìà", level=2)
    doc.add_paragraph(
        "Le tableau de bord propose plusieurs visualisations interactives pour explorer les donn√©es d‚Äôachat, r√©alis√©es avec la biblioth√®que Plotly et un th√®me sombre pour une lisibilit√© optimale. "
        "Chaque visualisation est con√ßue pour r√©pondre √† des questions sp√©cifiques de gestion des achats, comme l‚Äôidentification des cat√©gories co√ªteuses ou des fournisseurs dominants. "
        "Voici une description d√©taill√©e de chaque visualisation :"
    )
    visualizations = [
        ("D√©penses par Cat√©gorie d‚ÄôAchat", 
         "Un histogramme montre les d√©penses totales (`montant`) pour les 10 principales cat√©gories (`categorie_achat_1`). Les barres sont ordonn√©es par montant d√©croissant, "
         "avec des √©tiquettes claires (Cat√©gorie sur l‚Äôaxe X, Montant en MAD sur l‚Äôaxe Y). En survolant une barre, l‚Äôutilisateur voit le montant exact format√© avec 2 d√©cimales."),
        ("R√©partition des D√©penses par Fournisseur", 
         "Un graphique en donut affiche la part des d√©penses pour les 7 principaux fournisseurs. Chaque fournisseur est repr√©sent√© par une couleur distincte, avec le montant exact visible au survol."),
        ("R√©partition des Statuts de Commande", 
         "Un graphique en donut montre la distribution des statuts (`statut_approbation`, ex. : Approuv√©, En attente, Rejet√©). Le nombre de commandes par statut est affich√© au survol, avec une l√©gende interactive."),
        ("D√©lai Moyen de Livraison", 
         "Une courbe affiche le d√©lai moyen de livraison (en jours, calcul√© comme `date_livraison - date_commande`) par mois (format : `MMM YYYY`). Elle n√©cessite des dates valides pour `date_commande` et `date_livraison`."),
        ("Top 5 Articles par Quantit√©", 
         "Un histogramme pr√©sente les 5 articles (`article_desc`) avec les quantit√©s totales (`quantite`) les plus √©lev√©es. Les descriptions sont tronqu√©es √† 30 caract√®res pour la lisibilit√©."),
        ("R√©partition des Quantit√©s par Cat√©gorie et Article", 
         "Une carte hi√©rarchique (treemap) montre les quantit√©s par `categorie_achat_1` et `article_desc`. La taille des rectangles est proportionnelle √† la quantit√©, avec des d√©tails au survol."),
        ("Volume de Commandes par Fournisseur", 
         "Un histogramme affiche les 5 fournisseurs ayant au moins 3 commandes, ordonn√©s par nombre de commandes d√©croissant.")
    ]
    for title, desc in visualizations:
        doc.add_heading(title, level=3)
        doc.add_paragraph(desc)

    # Ajout des images des visualisations
    doc.add_heading("Visualisations Graphiques", level=2)
    # 1. D√©penses par Cat√©gorie d‚ÄôAchat
    doc.add_heading("D√©penses par Cat√©gorie d‚ÄôAchat", level=3)
    fig_category = px.bar(
        viz_data['spending_by_category'],
        x='categorie_achat_1',
        y='montant',
        title='D√©penses par cat√©gorie (MAD)',
        labels={'categorie_achat_1': 'Cat√©gorie', 'montant': 'Montant (MAD)'},
        template='plotly_dark',
        hover_data={'montant': ':,.2f'}
    )
    fig_category.update_layout(font=dict(size=12), xaxis_tickangle=45, yaxis_tickformat='.0s')
    category_img = "category_spending.png"
    save_plotly_fig_as_image(fig_category, category_img)
    doc.add_picture(category_img, width=Inches(6))

    # 2. R√©partition des D√©penses par Fournisseur
    doc.add_heading("R√©partition des D√©penses par Fournisseur", level=3)
    fig_supplier = px.pie(
        viz_data['spending_by_supplier'],
        names='fournisseur',
        values='montant',
        title='R√©partition des d√©penses par fournisseur',
        template='plotly_dark',
        color_discrete_sequence=px.colors.qualitative.Bold,
        hover_data={'montant': ':,.2f'}
    )
    fig_supplier.update_layout(font=dict(size=12), legend=dict(font=dict(size=12)))
    supplier_img = "supplier_spending.png"
    save_plotly_fig_as_image(fig_supplier, supplier_img)
    doc.add_picture(supplier_img, width=Inches(6))

    # 3. R√©partition des Statuts de Commande
    doc.add_heading("R√©partition des Statuts de Commande", level=3)
    fig_status = px.pie(
        viz_data['status_counts'],
        names='statut_approbation',
        values='Nombre',
        title='R√©partition des statuts de commande',
        template='plotly_dark',
        color_discrete_sequence=px.colors.qualitative.Set1,
        hover_data={'Nombre': True}
    )
    fig_status.update_layout(font=dict(size=12), legend=dict(font=dict(size=12)))
    status_img = "status_distribution.png"
    save_plotly_fig_as_image(fig_status, status_img)
    doc.add_picture(status_img, width=Inches(6))

    # 4. D√©lai Moyen de Livraison
    doc.add_heading("D√©lai Moyen de Livraison", level=3)
    if not viz_data['delivery_data'].empty:
        fig_delivery = px.line(
            viz_data['delivery_data'],
            x='Mois',
            y='Delivery_Days',
            title='D√©lai moyen de livraison (jours)',
            labels={'Delivery_Days': 'Jours moyens'},
            template='plotly_dark',
            hover_data={'Delivery_Days': ':.2f'}
        )
        fig_delivery.update_layout(font=dict(size=12), xaxis_tickangle=45)
        delivery_img = "delivery_delay.png"
        save_plotly_fig_as_image(fig_delivery, delivery_img)
        doc.add_picture(delivery_img, width=Inches(6))
    else:
        doc.add_paragraph("Aucune donn√©e disponible pour le d√©lai moyen de livraison.")

    # 5. Top 5 Articles par Quantit√©
    doc.add_heading("Top 5 Articles par Quantit√©", level=3)
    fig_items = px.bar(
        viz_data['items_by_quantity'],
        x='article_desc',
        y='quantite',
        title='Top 5 articles par quantit√©',
        labels={'article_desc': 'Article', 'quantite': 'Quantit√©'},
        template='plotly_dark',
        hover_data={'quantite': True}
    )
    fig_items.update_layout(font=dict(size=12), xaxis_tickangle=45)
    items_img = "top_items.png"
    save_plotly_fig_as_image(fig_items, items_img)
    doc.add_picture(items_img, width=Inches(6))

    # 6. R√©partition des Quantit√©s par Cat√©gorie et Article
    doc.add_heading("R√©partition des Quantit√©s par Cat√©gorie et Article", level=3)
    if not viz_data['article_category_data'].empty:
        fig_treemap = px.treemap(
            viz_data['article_category_data'],
            path=['categorie_achat_1', 'article_desc'],
            values='quantite',
            title='R√©partition des quantit√©s par cat√©gorie et article',
            template='plotly_dark',
            hover_data={'quantite': True}
        )
        fig_treemap.update_layout(font=dict(size=12))
        treemap_img = "quantity_treemap.png"
        save_plotly_fig_as_image(fig_treemap, treemap_img)
        doc.add_picture(treemap_img, width=Inches(6))
    else:
        doc.add_paragraph("Aucune donn√©e disponible pour la r√©partition des quantit√©s.")

    # 7. Volume de Commandes par Fournisseur
    doc.add_heading("Volume de Commandes par Fournisseur", level=3)
    if not viz_data['supplier_volume'].empty:
        fig_volume = px.bar(
            viz_data['supplier_volume'],
            x='fournisseur',
            y='Nombre_Commandes',
            title='Volume de commandes par fournisseur',
            labels={'fournisseur': 'Fournisseur', 'Nombre_Commandes': 'Nombre de commandes'},
            template='plotly_dark',
            hover_data={'Nombre_Commandes': True}
        )
        fig_volume.update_layout(font=dict(size=12), xaxis_tickangle=45)
        volume_img = "supplier_volume.png"
        save_plotly_fig_as_image(fig_volume, volume_img)
        doc.add_picture(volume_img, width=Inches(6))
    else:
        doc.add_paragraph("Aucun fournisseur avec ‚â•3 commandes.")

    # 8. Pr√©vision de la Demande
    doc.add_heading("Pr√©vision de la Demande", level=3)
    if not viz_data['forecast_data'].empty:
        fig_forecast = px.line(
            viz_data['forecast_data'],
            x='Index',
            y='Quantit√©',
            color='Article',
            line_dash='Type',
            title='Pr√©vision de la demande pour les top articles',
            labels={'Index': 'P√©riode'},
            template='plotly_dark',
            hover_data={'Quantit√©': ':.2f'}
        )
        fig_forecast.update_layout(font=dict(size=12), xaxis_tickangle=45)
        forecast_img = "demand_forecast.png"
        save_plotly_fig_as_image(fig_forecast, forecast_img)
        doc.add_picture(forecast_img, width=Inches(6))
    else:
        doc.add_paragraph("Aucune donn√©e disponible pour la pr√©vision de la demande.")

    # 9. Tendances des D√©penses par Cat√©gorie
    doc.add_heading("Tendances des D√©penses par Cat√©gorie", level=3)
    if not viz_data['spending_trends'].empty:
        fig_spending_trends = px.line(
            viz_data['spending_trends'],
            x='Mois',
            y='montant',
            color='categorie_achat_1',
            title='Tendances des d√©penses par cat√©gorie',
            labels={'montant': 'Montant (MAD)'},
            template='plotly_dark',
            hover_data={'montant': ':,.2f'}
        )
        fig_spending_trends.update_layout(font=dict(size=12), xaxis_tickangle=45)
        trends_img = "spending_trends.png"
        save_plotly_fig_as_image(fig_spending_trends, trends_img)
        doc.add_picture(trends_img, width=Inches(6))
    else:
        doc.add_paragraph("Aucune donn√©e disponible pour les tendances des d√©penses.")

    # 10. Score de Fiabilit√© des Fournisseurs
    doc.add_heading("Score de Fiabilit√© des Fournisseurs", level=3)
    if not viz_data['reliability_data'].empty:
        fig_reliability = px.bar(
            viz_data['reliability_data'],
            x='fournisseur',
            y='Taux_Livraison_√Ä_Temps',
            title='Taux de livraison √† temps par fournisseur',
            labels={'Taux_Livraison_√Ä_Temps': 'Taux √† temps (%)'},
            template='plotly_dark',
            hover_data={'D√©lai_Moyen': ':.2f', 'Nombre_Commandes': True}
        )
        fig_reliability.update_layout(font=dict(size=12), xaxis_tickangle=45)
        reliability_img = "supplier_reliability.png"
        save_plotly_fig_as_image(fig_reliability, reliability_img)
        doc.add_picture(reliability_img, width=Inches(6))
    else:
        doc.add_paragraph("Aucune donn√©e disponible pour les scores de fiabilit√©.")

    # 11. R√©partition des D√©penses par Cat√©gorie
    doc.add_heading("R√©partition des D√©penses par Cat√©gorie", level=3)
    if not viz_data['category_spending'].empty:
        fig_category_spending = px.pie(
            viz_data['category_spending'],
            names='categorie_achat_1',
            values='montant',
            title='R√©partition des d√©penses par cat√©gorie',
            template='plotly_dark',
            color_discrete_sequence=px.colors.qualitative.Bold,
            hover_data={'montant': ':,.2f'}
        )
        fig_category_spending.update_layout(font=dict(size=12), legend=dict(font=dict(size=12)))
        category_spending_img = "category_pie.png"
        save_plotly_fig_as_image(fig_category_spending, category_spending_img)
        doc.add_picture(category_spending_img, width=Inches(6))
    else:
        doc.add_paragraph("Aucune donn√©e disponible pour la r√©partition des d√©penses.")

    # Analyses Avanc√©es
    doc.add_heading("Analyses Avanc√©es üîç", level=2)
    doc.add_paragraph(
        "Le tableau de bord inclut des analyses avanc√©es pour fournir des insights approfondis, bas√©es sur des m√©thodes statistiques et pr√©dictives. "
        "Chaque analyse est accompagn√©e d‚Äôune explication th√©orique pour comprendre sa m√©thodologie et son application dans le contexte des achats. "
        "Ces analyses aident √† anticiper la demande, √©valuer les fournisseurs, et d√©tecter les anomalies."
    )

    # Pr√©vision de la Demande (ARIMA)
    doc.add_heading("Pr√©vision de la Demande (ARIMA)", level=3)
    doc.add_paragraph(
        "Cette analyse pr√©voit la demande pour les 5 articles les plus command√©s sur les 6 prochains mois √† l‚Äôaide du mod√®le ARIMA (AutoRegressive Integrated Moving Average). "
        "Elle utilise les donn√©es de `date_commande` et `quantite` pour g√©n√©rer des pr√©visions mensuelles, avec des recommandations de stock incluant une marge de 10%. "
        "Par exemple, si 100 unit√©s sont pr√©vues, la recommandation est de stocker 110 unit√©s pour couvrir les incertitudes."
    )
    doc.add_heading("Fondation Th√©orique", level=4)
    doc.add_paragraph(
        "ARIMA est un mod√®le de s√©ries temporelles qui capture les tendances, la saisonnalit√© et les variations al√©atoires dans les donn√©es. Il se compose de trois composantes : "
        "- **AR (AutoRegression)** : Mod√©lise la d√©pendance des valeurs actuelles sur les valeurs pass√©es (ex. : la demande d‚Äôun mois influence le suivant). "
        "- **I (Integrated)** : Applique une diff√©renciation pour rendre la s√©rie stationnaire, c‚Äôest-√†-dire sans tendance globale (ex. : soustraire la demande du mois pr√©c√©dent). "
        "- **MA (Moving Average)** : Prend en compte les erreurs de pr√©diction pass√©es pour lisser les fluctuations. "
        "Dans ce tableau de bord, ARIMA (1,1,1) est utilis√©, ce qui signifie une autoregression d‚Äôordre 1, une diff√©renciation d‚Äôordre 1, et une moyenne mobile d‚Äôordre 1. "
        "Les donn√©es sont agr√©g√©es par mois si `date_commande` est disponible (6877 dates valides), sinon un index num√©rique est utilis√©. "
        "Cette approche est id√©ale pour pr√©voir la demande dans un contexte d‚Äôachat o√π la saisonnalit√© (ex. : pics de demande) et les tendances (ex. : croissance des commandes) sont courantes."
    )
    doc.add_heading("Application aux Achats", level=4)
    doc.add_paragraph(
        "Pour CMG Draa-Lasfar, cette analyse aide √† planifier les stocks pour √©viter les ruptures, qui peuvent perturber les op√©rations. Par exemple, si un article critique comme un composant minier "
        "montre une demande croissante, la pr√©vision ARIMA permet de commander √† l‚Äôavance, r√©duisant les co√ªts d‚Äôurgence. Les recommandations de stock incluent une marge de 10% pour absorber les impr√©vus, "
        "comme des retards de livraison ou des variations soudaines de la demande."
    )

    # Tendances des D√©penses
    doc.add_heading("Tendances des D√©penses par Cat√©gorie", level=3)
    doc.add_paragraph(
        "Une courbe montre l‚Äô√©volution des d√©penses (`montant`) par `categorie_achat_1` au fil des mois, bas√©e sur `date_commande`. "
        "Les donn√©es sont agr√©g√©es par mois pour r√©v√©ler les tendances saisonni√®res ou les anomalies. Cette visualisation est particuli√®rement utile pour identifier les p√©riodes de d√©penses √©lev√©es "
        "et ajuster les budgets en cons√©quence."
    )
    doc.add_heading("Fondation Th√©orique", level=4)
    doc.add_paragraph(
        "L‚Äôanalyse des tendances repose sur l‚Äôagr√©gation temporelle et la visualisation des s√©ries temporelles. En regroupant les d√©penses par mois et cat√©gorie, le tableau de bord d√©tecte des sch√©mas "
        "tels que des pics saisonniers (ex. : achats accrus en fin d‚Äôann√©e) ou des anomalies (ex. : d√©pense inhabituelle dans une cat√©gorie). "
        "Cette approche est ancr√©e dans l‚Äôanalyse exploratoire des donn√©es (EDA), qui vise √† identifier des patterns sans hypoth√®ses pr√©alables."
    )
    doc.add_heading("Application aux Achats", level=4)
    doc.add_paragraph(
        "√Ä CMG Draa-Lasfar, comprendre les tendances des d√©penses permet de planifier les budgets et de n√©gocier avec les fournisseurs avant les p√©riodes de forte demande. "
        "Par exemple, si une cat√©gorie comme les √©quipements miniers montre des d√©penses croissantes en √©t√©, l‚Äôentreprise peut anticiper et n√©gocier des rabais √† l‚Äôavance."
    )

    # Score de Fiabilit√© des Fournisseurs
    doc.add_heading("Score de Fiabilit√© des Fournisseurs", level=3)
    doc.add_paragraph(
        "Cette analyse √©value les fournisseurs selon leur ponctualit√© de livraison, en calculant le d√©lai moyen (`D√©lai_Moyen` = `date_livraison - date_promesse` en jours) "
        "et le taux de livraison √† temps (`Taux_Livraison_√Ä_Temps` = pourcentage de livraisons o√π `D√©lai_Moyen ‚â§ 0`). "
        "Seuls les fournisseurs avec au moins 3 commandes sont inclus pour garantir des r√©sultats significatifs. Les r√©sultats sont affich√©s dans un histogramme et un tableau d√©taill√©."
    )
    doc.add_heading("Fondation Th√©orique", level=4)
    doc.add_paragraph(
        "La fiabilit√© des fournisseurs est mesur√©e √† l‚Äôaide de deux m√©triques de performance : "
        "- **D√©lai Moyen** : Moyenne des √©carts entre la date de livraison r√©elle et promise, exprim√©e en jours. Un d√©lai n√©gatif ou nul indique une livraison √† temps ou en avance. "
        "- **Taux de Livraison √† Temps** : Proportion des commandes livr√©es √† temps, exprim√©e en pourcentage. Cette m√©trique est calcul√©e comme la moyenne des cas o√π `D√©lai_Moyen ‚â§ 0`. "
        "Ces m√©triques sont standard dans la gestion de la cha√Æne d‚Äôapprovisionnement, o√π la ponctualit√© est essentielle pour minimiser les interruptions. "
        "L‚Äôapproche repose sur l‚Äôagr√©gation statistique (moyenne, comptage) et le filtrage pour assurer la robustesse (ex. : ‚â•3 commandes)."
    )
    doc.add_heading("Application aux Achats", level=4)
    doc.add_paragraph(
        "Pour CMG Draa-Lasfar, cette analyse identifie les fournisseurs les plus fiables pour prioriser les partenariats strat√©giques. Par exemple, un fournisseur avec un `Taux_Livraison_√Ä_Temps` de 90% "
        "est pr√©f√©rable pour les articles critiques, r√©duisant les risques de retards. √Ä l‚Äôinverse, un fournisseur avec des d√©lais moyens √©lev√©s peut n√©cessiter une ren√©gociation ou un remplacement."
    )

    # D√©tection des Anomalies
    doc.add_heading("D√©tection des Anomalies", level=3)
    doc.add_paragraph(
        "Cette analyse identifie les d√©penses inhabituelles dans chaque cat√©gorie (`categorie_achat_1`) en utilisant les scores Z. "
        "Les anomalies sont des enregistrements o√π le montant est significativement diff√©rent de la moyenne (score Z > 3 ou < -3). "
        "Les r√©sultats sont pr√©sent√©s dans un tableau avec le fournisseur, l‚Äôarticle, la cat√©gorie, et le montant."
    )
    doc.add_heading("Fondation Th√©orique", level=4)
    doc.add_paragraph(
        "Les scores Z mesurent l‚Äô√©cart d‚Äôune valeur par rapport √† la moyenne, normalis√© par l‚Äô√©cart-type : "
        "`Z = (x - moyenne) / √©cart-type`. Sous l‚Äôhypoth√®se d‚Äôune distribution normale, environ 99,7% des donn√©es se trouvent dans un intervalle de ¬±3 √©carts-types. "
        "Un score Z sup√©rieur √† 3 indique une valeur extr√™me (anomalie). Cette m√©thode est largement utilis√©e en d√©tection d‚Äôoutliers, particuli√®rement dans les donn√©es financi√®res "
        "o√π des d√©penses inhabituelles peuvent signaler des erreurs ou des fraudes."
    )
    doc.add_heading("Application aux Achats", level=4)
    doc.add_paragraph(
        "√Ä CMG Draa-Lasfar, les anomalies peuvent indiquer des erreurs de facturation, des achats non autoris√©s, ou des prix excessifs. Par exemple, un `montant` anormalement √©lev√© pour un article "
        "dans la cat√©gorie des fournitures peut d√©clencher une investigation pour v√©rifier la validit√© de la transaction. Cette analyse renforce l‚Äôint√©grit√© des processus d‚Äôachat."
    )

    # Fonctionnalit√©s Interactives
    doc.add_heading("Fonctionnalit√©s Interactives üñ±Ô∏è", level=2)
    doc.add_paragraph(
        "Le tableau de bord est con√ßu pour √™tre intuitif et interactif, facilitant l‚Äôexploration des donn√©es par les utilisateurs de tous niveaux. Voici les principales fonctionnalit√©s :"
    )
    interactions = [
        ("Filtre par Cat√©gorie", 
         "Une barre lat√©rale permet de s√©lectionner une cat√©gorie (`categorie_achat_1`) ou 'Toutes'. Ce filtre met √† jour toutes les visualisations et analyses en temps r√©el, "
         "permettant une analyse cibl√©e. Par exemple, s√©lectionner une cat√©gorie comme '√âquipements' concentre les r√©sultats sur cette cat√©gorie, facilitant l‚Äôidentification des fournisseurs cl√©s."),
        ("Sections D√©pliables", 
         "Les analyses avanc√©es (pr√©visions, fiabilit√©, anomalies) sont organis√©es dans des sections r√©tractables pour une navigation claire. Chaque section inclut des explications et des messages de d√©bogage "
         "si les donn√©es sont insuffisantes, aidant les utilisateurs √† comprendre les limitations (ex. : trop de dates manquantes)."),
        ("M√©triques Cl√©s", 
         "Trois cartes en haut affichent la d√©pense totale (format√©e comme `1.2M`), le nombre de commandes, et le nombre de fournisseurs uniques. Ces m√©triques offrent un aper√ßu rapide des performances globales."),
        ("T√©l√©chargement des Rapports", 
         "Les utilisateurs peuvent t√©l√©charger un r√©sum√© CSV (`rapport_achats.csv`) avec les m√©triques cl√©s et cette documentation Word (`Documentation_Tableau_de_Bord_Achats.docx`). "
         "Le document Word refl√®te la cat√©gorie s√©lectionn√©e, offrant un guide personnalis√©.")
    ]
    for title, desc in interactions:
        doc.add_heading(title, level=3)
        doc.add_paragraph(desc)

    # Recommandations
    doc.add_heading("Recommandations ‚úÖ", level=2)
    doc.add_paragraph(
        "Le tableau de bord fournit des recommandations exploitables pour optimiser la gestion des achats √† CMG Draa-Lasfar. Ces recommandations sont d√©riv√©es des analyses et visualisations :"
    )
    recommendations = [
        "N√©gocier avec les fournisseurs cl√©s identifi√©s dans la r√©partition des d√©penses pour obtenir des rabais ou des conditions avantageuses.",
        "Planifier les stocks en fonction des pr√©visions ARIMA pour √©viter les ruptures, particuli√®rement pour les articles critiques.",
        "Simplifier le processus d‚Äôapprobation des commandes pour r√©duire les d√©lais, en s‚Äôappuyant sur l‚Äôanalyse des statuts.",
        "Investiguer les anomalies d√©tect√©es pour identifier les erreurs, fraudes, ou opportunit√©s d‚Äôoptimisation des co√ªts.",
        "Prioriser les fournisseurs avec un `Taux_Livraison_√Ä_Temps` √©lev√© pour garantir la continuit√© des op√©rations."
    ]
    for rec in recommendations:
        doc.add_paragraph(f"- {rec}")

    # Notes Techniques
    doc.add_heading("Notes Techniques üõ†Ô∏è", level=2)
    doc.add_paragraph(
        "Fichier requis : `demandes_achats.xlsx` dans le m√™me r√©pertoire que le script. "
        "Biblioth√®ques utilis√©es : Streamlit (interface), Pandas (donn√©es), Plotly (visualisations), Openpyxl (Excel), Statsmodels (ARIMA), Scipy (anomalies), Python-docx (Word), Kaleido (export d‚Äôimages). "
        "Installation : `pip install streamlit pandas plotly openpyxl statsmodels scipy python-docx kaleido`. "
        "Lancement : `streamlit run procurement_dashboard.py`."
    )

    # Sauvegarde dans un buffer
    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# Charger et traiter les donn√©es
@st.cache_data
def load_and_process_data():
    try:
        df = pd.read_excel("demandes_achats.xlsx", na_values=['', 'NA', 'NaT'])
    except Exception as e:
        st.error(f"Erreur lors du chargement du fichier Excel : {e}")
        return pd.DataFrame(), {}

    df.columns = [col.strip().replace('"', '') for col in df.columns]
    numeric_cols = ['quantite', 'prix_unitaire', 'montant', 'quantite_commande', 'quantite_recue', 'quantite_due']
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
    df['categorie_achat_1'] = df['categorie_achat_1'].astype(str).fillna('Inconnu')
    date_cols = ['date_commande', 'date_livraison', 'date_promesse']
    date_debug = {}
    for col in date_cols:
        df[col] = pd.to_datetime(df[col], errors='coerce')
        valid_count = df[col].notna().sum()
        date_debug[col] = valid_count
        if valid_count == 0:
            df[col] = pd.to_datetime(df[col], errors='coerce', format='%d/%m/%Y')
            valid_count = df[col].notna().sum()
            date_debug[col] = valid_count
    df = df.dropna(how='all')
    return df, date_debug

# Traiter les donn√©es pour les visualisations et analyses avanc√©es
@st.cache_data
def process_visualization_data(df, selected_category=None):
    if selected_category and selected_category != "Toutes":
        df = df[df['categorie_achat_1'] == selected_category]
    spending_by_category = df.groupby('categorie_achat_1')['montant'].sum().reset_index().sort_values('montant', ascending=False).head(10)
    spending_by_supplier = df.groupby('fournisseur')['montant'].sum().reset_index().sort_values('montant', ascending=False).head(7)
    status_counts = df['statut_approbation'].value_counts().reset_index()
    status_counts.columns = ['statut_approbation', 'Nombre']
    delivery_data = pd.DataFrame()
    delivery_debug = ""
    if df['date_livraison'].notnull().sum() > 0 and df['date_commande'].notnull().sum() > 0:
        df['Delivery_Days'] = (df['date_livraison'] - df['date_commande']).dt.days
        delivery_times = df.dropna(subset=['Delivery_Days', 'date_commande', 'date_livraison'])
        if not delivery_times.empty:
            delivery_times['Mois'] = delivery_times['date_commande'].dt.strftime('%b %Y')
            delivery_data = delivery_times.groupby('Mois')['Delivery_Days'].mean().reset_index().sort_values('Mois')
        delivery_debug = f"Lignes avec dates valides : {len(delivery_times)}"
    else:
        delivery_debug = f"Aucune date valide (date_commande : {df['date_commande'].notnull().sum()}, date_livraison : {df['date_livraison'].notnull().sum()})"
    items_by_quantity = df.groupby('article_desc')['quantite'].sum().reset_index()
    items_by_quantity['article_desc'] = items_by_quantity['article_desc'].str.slice(0, 30)
    items_by_quantity = items_by_quantity.sort_values('quantite', ascending=False).head(5)
    supplier_category_spending = df.groupby(['fournisseur', 'categorie_achat_1'])['montant'].sum().reset_index()
    interesting_fact = supplier_category_spending.loc[supplier_category_spending['montant'].idxmax()]
    forecast_data = []
    forecast_debug = []
    forecast_recommendations = []
    top_items = items_by_quantity['article_desc'].head(5).tolist()
    use_dates = df['date_commande'].notnull().sum() >= len(df) * 0.5
    for item in top_items:
        item_data = df[df['article_desc'] == item][['date_commande', 'quantite']].dropna(subset=['quantite'])
        valid_records = len(item_data)
        if valid_records >= 3:
            if use_dates and item_data['date_commande'].notnull().sum() >= len(item_data) * 0.5:
                item_data = item_data.groupby(item_data['date_commande'].dt.to_period('M'))['quantite'].sum().reset_index()
                item_data['date_commande'] = item_data['date_commande'].dt.to_timestamp()
                quantities = item_data['quantite'].values
                indices = item_data['date_commande']
                forecast_steps = pd.date_range(start=indices.max() + pd.offsets.MonthBegin(1), periods=6, freq='M')
            else:
                item_data = item_data.reset_index()
                quantities = item_data['quantite'].values
                indices = np.arange(valid_records)
                forecast_steps = np.arange(valid_records, valid_records + 6)
            try:
                model = ARIMA(quantities, order=(1, 1, 1))
                fit = model.fit()
                forecast = fit.forecast(steps=6)
                forecast = np.clip(forecast, 0, None)
                historical_df = pd.DataFrame({
                    'Index': indices,
                    'Quantit√©': quantities,
                    'Article': item,
                    'Type': 'Historique'
                })
                forecast_df = pd.DataFrame({
                    'Index': forecast_steps,
                    'Quantit√©': forecast,
                    'Article': item,
                    'Type': 'Pr√©vision'
                })
                forecast_data.append(pd.concat([historical_df, forecast_df]))
                total_forecast = forecast.sum()
                forecast_recommendations.append(f"Stockez environ {int(total_forecast * 1.1)} unit√©s de {item} pour couvrir la demande pr√©vue sur 6 mois (10% de marge).")
            except:
                forecast_debug.append(f"√âchec de la pr√©vision pour {item} : Erreur du mod√®le ARIMA")
        else:
            forecast_debug.append(f"Donn√©es insuffisantes pour {item} : {valid_records} enregistrements")
    forecast_data = pd.concat(forecast_data) if forecast_data else pd.DataFrame()
    spending_trends = pd.DataFrame()
    spending_trends_debug = ""
    if df['date_commande'].notnull().sum() > 0:
        df['Mois'] = df['date_commande'].dt.to_period('M').astype(str)
        spending_trends = df.groupby(['Mois', 'categorie_achat_1'])['montant'].sum().reset_index().sort_values('Mois')
        spending_trends_debug = f"Lignes avec date_commande valide : {df['date_commande'].notnull().sum()}"
    else:
        spending_trends_debug = f"Aucune date_commande valide"
    reliability_data = pd.DataFrame()
    reliability_debug = ""
    if df['date_livraison'].notnull().sum() > 0 and df['date_promesse'].notnull().sum() > 0:
        df['Delivery_Delay'] = (df['date_livraison'] - df['date_promesse']).dt.days
        reliability = df.dropna(subset=['Delivery_Delay', 'fournisseur'])
        if not reliability.empty:
            reliability_data = reliability.groupby('fournisseur').agg({
                'Delivery_Delay': 'mean',
                'fournisseur': 'count'
            }).rename(columns={'fournisseur': 'Nombre_Commandes', 'Delivery_Delay': 'D√©lai_Moyen'}).reset_index()
            reliability_data = reliability_data[reliability_data['Nombre_Commandes'] >= 3].sort_values('D√©lai_Moyen')
            try:
                on_time_rates = reliability.groupby('fournisseur').apply(
                    lambda x: (x['Delivery_Delay'] <= 0).mean() * 100
                ).reset_index(name='Taux_Livraison_√Ä_Temps')
                reliability_data = reliability_data.merge(on_time_rates, on='fournisseur', how='left')
            except Exception as e:
                reliability_debug += f" Erreur calcul taux √† temps : {e}"
        reliability_debug = f"Fournisseurs avec ‚â•3 commandes : {len(reliability_data)}"
    else:
        reliability_debug = f"Aucune date valide (date_livraison : {df['date_livraison'].notnull().sum()}, date_promesse : {df['date_promesse'].notnull().sum()})"
    category_spending = df.groupby('categorie_achat_1')['montant'].sum().reset_index()
    category_spending = category_spending[category_spending['montant'] > 0]
    category_spending_debug = f"Nombre de cat√©gories avec d√©penses : {len(category_spending)}"
    supplier_volume = df.groupby('fournisseur').size().reset_index(name='Nombre_Commandes')
    supplier_volume = supplier_volume[supplier_volume['Nombre_Commandes'] >= 3].sort_values('Nombre_Commandes', ascending=False).head(5)
    supplier_volume_debug = f"Fournisseurs avec ‚â•3 commandes : {len(supplier_volume)}"
    article_category_data = df.groupby(['categorie_achat_1', 'article_desc'])['quantite'].sum().reset_index()
    article_category_data = article_category_data[article_category_data['quantite'] > 0]
    top_articles = df.groupby(['article_desc', 'categorie_achat_1', 'fournisseur'])\
        .agg({'quantite': 'sum', 'montant': 'sum'})\
        .reset_index()\
        .sort_values('quantite', ascending=False)\
        .head(10)
    article_category_debug = f"Articles avec quantit√©s : {len(article_category_data)}"
    anomalies = []
    anomaly_debug = []
    anomaly_data = pd.DataFrame()
    try:
        for category in df['categorie_achat_1'].unique():
            cat_data = df[df['categorie_achat_1'] == category]['montant']
            if len(cat_data) > 10 and cat_data.var() > 0:
                try:
                    z_scores = stats.zscore(cat_data)
                    anomaly_indices = cat_data.index[abs(z_scores) > 3]
                    for idx in anomaly_indices:
                        anomalies.append({
                            'fournisseur': df.loc[idx, 'fournisseur'],
                            'article_desc': df.loc[idx, 'article_desc'][:30] if pd.notnull(df.loc[idx, 'article_desc']) else 'Inconnu',
                            'categorie_achat_1': category,
                            'montant': df.loc[idx, 'montant']
                        })
                except Exception as e:
                    anomaly_debug.append(f"Erreur pour la cat√©gorie {category} : {e}")
            else:
                anomaly_debug.append(f"Cat√©gorie {category} : Donn√©es insuffisantes ({len(cat_data)} enregistrements) ou variance nulle")
        anomaly_data = pd.DataFrame(anomalies) if anomalies else pd.DataFrame(columns=['fournisseur', 'article_desc', 'categorie_achat_1', 'montant'])
    except Exception as e:
        anomaly_debug.append(f"√âchec global de la d√©tection des anomalies : {e}")
    summary_data = pd.DataFrame({
        'M√©trique': ['D√©pense totale (MAD)', 'Nombre de commandes', 'Cat√©gorie principale'],
        'Valeur': [
            df['montant'].sum(),
            len(df),
            spending_by_category['categorie_achat_1'].iloc[0] if not spending_by_category.empty else 'N/A'
        ]
    })
    return {
        'spending_by_category': spending_by_category,
        'spending_by_supplier': spending_by_supplier,
        'status_counts': status_counts,
        'delivery_data': delivery_data,
        'items_by_quantity': items_by_quantity,
        'interesting_fact': interesting_fact,
        'forecast_data': forecast_data,
        'category_spending': category_spending,
        'supplier_volume': supplier_volume,
        'article_category_data': article_category_data,
        'top_articles': top_articles,
        'summary_data': summary_data,
        'anomaly_data': anomaly_data,
        'spending_trends': spending_trends,
        'reliability_data': reliability_data,
        'forecast_debug': forecast_debug,
        'forecast_recommendations': forecast_recommendations,
        'delivery_debug': delivery_debug,
        'category_spending_debug': category_spending_debug,
        'supplier_volume_debug': supplier_volume_debug,
        'article_category_debug': article_category_debug,
        'anomaly_debug': anomaly_debug,
        'spending_trends_debug': spending_trends_debug,
        'reliability_debug': reliability_debug
    }

# Charger les donn√©es
df, date_debug = load_and_process_data()
if df.empty:
    st.error("Impossible de charger les donn√©es. V√©rifiez le fichier 'demandes_achats.xlsx'. ‚ö†Ô∏è")
    st.stop()

# Filtre de cat√©gorie dans la barre lat√©rale
st.sidebar.header("üîç Filtrer par cat√©gorie")
try:
    unique_categories = [str(x) for x in df['categorie_achat_1'].unique() if x != 'nan']
    category_options = ["Toutes"] + sorted(unique_categories)
except Exception as e:
    st.sidebar.error(f"Erreur lors du chargement des cat√©gories : {e}")
    st.sidebar.write("Valeurs uniques dans categorie_achat_1 :")
    st.sidebar.write(df['categorie_achat_1'].unique().tolist())
    category_options = ["Toutes"]
selected_category = st.sidebar.selectbox("Choisir une cat√©gorie", category_options)
viz_data = process_visualization_data(df, selected_category)

# Titre du tableau de bord
st.title("üìä Tableau de bord des achats")

# Statut des dates
if all(count == 0 for count in date_debug.values()):
    st.warning("""
    ‚ö†Ô∏è **Probl√®me de donn√©es d√©tect√©** : Aucune date valide dans `date_commande`, `date_livraison` ou `date_promesse`. Cela limite les analyses temporelles. V√©rifiez le format des dates dans `demandes_achats.xlsx` (ex. : 'YYYY-MM-DD' ou 'DD/MM/YYYY') et assurez-vous que ces colonnes ne sont pas vides.
    """)
else:
    st.info(f"""
    üìÖ **Statut des dates** :
    - `date_commande` : {date_debug['date_commande']} dates valides
    - `date_livraison` : {date_debug['date_livraison']} dates valides
    - `date_promesse` : {date_debug['date_promesse']} dates valides
    """)

# M√©triques cl√©s
st.subheader("üìä Aper√ßu des indicateurs cl√©s")
col1, col2, col3 = st.columns(3)
col1.metric("D√©pense totale (MAD)", f"{abbreviate_number(df['montant'].sum())}")
col2.metric("Nombre de commandes", len(df))
col3.metric("Fournisseurs uniques", df['fournisseur'].nunique())

# Section R√©sum√©
st.write("""
Ce tableau de bord fournit des informations sur les activit√©s d'achat √† CMG Draa-Lasfar. Explorez les d√©penses, les fournisseurs, les statuts des commandes et les articles les plus demand√©s. Utilisez le filtre pour analyser une cat√©gorie sp√©cifique. ‚≠ê
""")
st.write(f"""
**Fait int√©ressant :** Le fournisseur **{viz_data['interesting_fact']['fournisseur']}** domine la cat√©gorie **{viz_data['interesting_fact']['categorie_achat_1']}** avec **{abbreviate_number(viz_data['interesting_fact']['montant'])} MAD**. üöÄ
""")

# Visualisations
st.subheader("üìà Visualisations")
col1, col2 = st.columns(2)
with col1:
    fig_category = px.bar(
        viz_data['spending_by_category'],
        x='categorie_achat_1',
        y='montant',
        title='D√©penses par cat√©gorie (MAD)',
        labels={'categorie_achat_1': 'Cat√©gorie', 'montant': 'Montant (MAD)'},
        template='plotly_dark',
        hover_data={'montant': ':,.2f'}
    )
    fig_category.update_layout(font=dict(size=12), xaxis_tickangle=45, yaxis_tickformat='.0s')
    st.plotly_chart(fig_category, use_container_width=True)
with col2:
    fig_supplier = px.pie(
        viz_data['spending_by_supplier'],
        names='fournisseur',
        values='montant',
        title='R√©partition des d√©penses par fournisseur',
        template='plotly_dark',
        color_discrete_sequence=px.colors.qualitative.Bold,
        hover_data={'montant': ':,.2f'}
    )
    fig_supplier.update_layout(font=dict(size=12), legend=dict(font=dict(size=12)))
    st.plotly_chart(fig_supplier, use_container_width=True)
with col1:
    fig_status = px.pie(
        viz_data['status_counts'],
        names='statut_approbation',
        values='Nombre',
        title='R√©partition des statuts de commande',
        template='plotly_dark',
        color_discrete_sequence=px.colors.qualitative.Set1,
        hover_data={'Nombre': True}
    )
    fig_status.update_layout(font=dict(size=12), legend=dict(font=dict(size=12)))
    st.plotly_chart(fig_status, use_container_width=True)
with col2:
    if not viz_data['delivery_data'].empty:
        fig_delivery = px.line(
            viz_data['delivery_data'],
            x='Mois',
            y='Delivery_Days',
            title='D√©lai moyen de livraison (jours)',
            labels={'Delivery_Days': 'Jours moyens'},
            template='plotly_dark',
            hover_data={'Delivery_Days': ':.2f'}
        )
        fig_delivery.update_layout(font=dict(size=12), xaxis_tickangle=45)
        st.plotly_chart(fig_delivery, use_container_width=True)
    else:
        st.write("Aucun d√©lai de livraison disponible. ‚ö†Ô∏è")
        st.write(viz_data['delivery_debug'])
with col1:
    fig_items = px.bar(
        viz_data['items_by_quantity'],
        x='article_desc',
        y='quantite',
        title='Top 5 articles par quantit√©',
        labels={'article_desc': 'Article', 'quantite': 'Quantit√©'},
        template='plotly_dark',
        hover_data={'quantite': True}
    )
    fig_items.update_layout(font=dict(size=12), xaxis_tickangle=45)
    st.plotly_chart(fig_items, use_container_width=True)

# Tableau des principaux fournisseurs
st.subheader("üìã Principaux fournisseurs par d√©pense")
supplier_table = viz_data['spending_by_supplier'].copy()
supplier_table['Nombre de commandes'] = supplier_table['fournisseur'].apply(
    lambda x: len(df[df['fournisseur'] == x]) if selected_category == "Toutes" else len(df[(df['fournisseur'] == x) & (df['categorie_achat_1'] == selected_category)])
)
supplier_table['montant'] = supplier_table['montant'].apply(abbreviate_number)
supplier_table = supplier_table.rename(columns={'fournisseur': 'Fournisseur', 'montant': 'D√©pense totale (MAD)'})
st.dataframe(supplier_table, use_container_width=True)

# Section Analyse avanc√©e
st.subheader("üîç Analyse avanc√©e")
with st.expander("üìà Pr√©vision de la demande pour les top articles"):
    st.write("Pr√©vision de la demande pour les 5 articles les plus demand√©s sur les 6 prochains mois. üìÖ")
    if not viz_data['forecast_data'].empty:
        fig_forecast = px.line(
            viz_data['forecast_data'],
            x='Index',
            y='Quantit√©',
            color='Article',
            line_dash='Type',
            title='Pr√©vision de la demande pour les top articles',
            labels={'Index': 'P√©riode'},
            template='plotly_dark',
            hover_data={'Quantit√©': ':.2f'}
        )
        fig_forecast.update_layout(font=dict(size=12), xaxis_tickangle=45)
        st.plotly_chart(fig_forecast, use_container_width=True)
        st.write("**Recommandations de stock :**")
        for rec in viz_data['forecast_recommendations']:
            st.write(f"- {rec}")
    else:
        st.write("Donn√©es insuffisantes pour la pr√©vision. ‚ö†Ô∏è")
        st.write(f"Nombre total de lignes dans le dataset : {len(df)}")
        st.write(f"Lignes avec quantit√© valide : {len(df[df['quantite'] > 0])}")
        for debug_msg in viz_data['forecast_debug']:
            st.write(debug_msg)
with st.expander("üìä Tendances des d√©penses par cat√©gorie"):
    st.write("√âvolution des d√©penses par cat√©gorie au fil du temps. üí∏")
    if not viz_data['spending_trends'].empty:
        fig_spending_trends = px.line(
            viz_data['spending_trends'],
            x='Mois',
            y='montant',
            color='categorie_achat_1',
            title='Tendances des d√©penses par cat√©gorie',
            labels={'montant': 'Montant (MAD)'},
            template='plotly_dark',
            hover_data={'montant': ':,.2f'}
        )
        fig_spending_trends.update_layout(font=dict(size=12), xaxis_tickangle=45)
        st.plotly_chart(fig_spending_trends, use_container_width=True)
    else:
        st.write("Aucune donn√©e disponible pour les tendances des d√©penses. ‚ö†Ô∏è")
        st.write(viz_data['spending_trends_debug'])
with st.expander("‚≠ê Score de fiabilit√© des fournisseurs"):
    st.write("Classement des principaux fournisseurs selon leurs performances de livraison. üöö")
    if not viz_data['reliability_data'].empty:
        fig_reliability = px.bar(
            viz_data['reliability_data'],
            x='fournisseur',
            y='Taux_Livraison_√Ä_Temps',
            title='Taux de livraison √† temps par fournisseur',
            labels={'Taux_Livraison_√Ä_Temps': 'Taux √† temps (%)'},
            template='plotly_dark',
            hover_data={'D√©lai_Moyen': ':.2f', 'Nombre_Commandes': True}
        )
        fig_reliability.update_layout(font=dict(size=12), xaxis_tickangle=45)
        st.plotly_chart(fig_reliability, use_container_width=True)
        reliability_table = viz_data['reliability_data'].copy()
        reliability_table['D√©lai_Moyen'] = reliability_table['D√©lai_Moyen'].round(2)
        reliability_table['Taux_Livraison_√Ä_Temps'] = reliability_table['Taux_Livraison_√Ä_Temps'].round(2)
        reliability_table = reliability_table.rename(columns={
            'fournisseur': 'Fournisseur',
            'D√©lai_Moyen': 'D√©lai moyen (jours)',
            'Nombre_Commandes': 'Nombre de commandes',
            'Taux_Livraison_√Ä_Temps': 'Taux √† temps (%)'
        })
        st.dataframe(reliability_table, use_container_width=True)
    else:
        st.write("Aucune donn√©e disponible pour les scores de fiabilit√©. ‚ö†Ô∏è")
        st.write(viz_data['reliability_debug'])
with st.expander("üìä R√©partition des d√©penses par cat√©gorie"):
    st.write("R√©partition des d√©penses totales par cat√©gorie d'achat. üí∏")
    if not viz_data['category_spending'].empty:
        fig_category_spending = px.pie(
            viz_data['category_spending'],
            names='categorie_achat_1',
            values='montant',
            title='R√©partition des d√©penses par cat√©gorie',
            template='plotly_dark',
            color_discrete_sequence=px.colors.qualitative.Bold,
            hover_data={'montant': ':,.2f'}
        )
        fig_category_spending.update_layout(font=dict(size=12), legend=dict(font=dict(size=12)))
        st.plotly_chart(fig_category_spending, use_container_width=True)
    else:
        st.write("Aucune donn√©e disponible pour la r√©partition des d√©penses. ‚ö†Ô∏è")
        st.write(viz_data['category_spending_debug'])
with st.expander("‚≠ê Volume de commandes par fournisseur"):
    st.write("Classement des principaux fournisseurs selon le nombre de commandes pass√©es. üöö")
    if not viz_data['supplier_volume'].empty:
        fig_volume = px.bar(
            viz_data['supplier_volume'],
            x='fournisseur',
            y='Nombre_Commandes',
            title='Volume de commandes par fournisseur',
            labels={'fournisseur': 'Fournisseur', 'Nombre_Commandes': 'Nombre de commandes'},
            template='plotly_dark',
            hover_data={'Nombre_Commandes': True}
        )
        fig_volume.update_layout(font=dict(size=12), xaxis_tickangle=45)
        st.plotly_chart(fig_volume, use_container_width=True)
        volume_table = viz_data['supplier_volume'].rename(columns={
            'fournisseur': 'Fournisseur',
            'Nombre_Commandes': 'Nombre de commandes'
        })
        st.dataframe(volume_table, use_container_width=True)
    else:
        st.write("Aucun fournisseur avec ‚â•3 commandes. ‚ö†Ô∏è")
        st.write(viz_data['supplier_volume_debug'])
with st.expander("üì¶ Analyse des articles et cat√©gories"):
    st.write("R√©partition des quantit√©s d'articles par cat√©gorie et d√©tails des principaux articles. üõí")
    if not viz_data['article_category_data'].empty:
        fig_treemap = px.treemap(
            viz_data['article_category_data'],
            path=['categorie_achat_1', 'article_desc'],
            values='quantite',
            title='R√©partition des quantit√©s par cat√©gorie et article',
            template='plotly_dark',
            hover_data={'quantite': True}
        )
        fig_treemap.update_layout(font=dict(size=12))
        st.plotly_chart(fig_treemap, use_container_width=True)
    else:
        st.write("Aucune donn√©e disponible pour les articles. ‚ö†Ô∏è")
        st.write(viz_data['article_category_debug'])
    st.write("**Top 10 articles :**")
    if not viz_data['top_articles'].empty:
        article_table = viz_data['top_articles'].copy()
        article_table['montant'] = article_table['montant'].apply(abbreviate_number)
        article_table = article_table.rename(columns={
            'article_desc': 'Article',
            'categorie_achat_1': 'Cat√©gorie',
            'fournisseur': 'Fournisseur',
            'quantite': 'Quantit√©',
            'montant': 'Montant (MAD)'
        })
        st.dataframe(article_table, use_container_width=True)
    else:
        st.write("Aucun article avec donn√©es valides. ‚ö†Ô∏è")
with st.expander("‚ö†Ô∏è D√©tection des anomalies"):
    st.write("Mod√®les de d√©penses inhabituels pouvant n√©cessiter une investigation. üîé")
    if 'anomaly_data' in viz_data and not viz_data['anomaly_data'].empty:
        anomaly_table = viz_data['anomaly_data'].copy()
        anomaly_table['montant'] = anomaly_table['montant'].apply(abbreviate_number)
        anomaly_table = anomaly_table.rename(columns={
            'fournisseur': 'Fournisseur',
            'article_desc': 'Article',
            'categorie_achat_1': 'Cat√©gorie',
            'montant': 'Montant (MAD)'
        })
        st.dataframe(anomaly_table, use_container_width=True)
    else:
        st.write("Aucune anomalie d√©tect√©e ou donn√©es insuffisantes. ‚úÖ")
        if 'anomaly_debug' in viz_data:
            for debug_msg in viz_data['anomaly_debug']:
                st.write(f"- {debug_msg}")

# Conclusion
st.subheader("‚úÖ R√©sum√© et recommandations")
st.write("R√©sum√© des insights cl√©s pour guider la prise de d√©cision :")
if not viz_data['summary_data'].empty:
    fig_summary = px.bar(
        viz_data['summary_data'],
        x='M√©trique',
        y='Valeur' if viz_data['summary_data']['M√©trique'].str.contains('D√©pense|Nombre').any() else None,
        text='Valeur',
        title='R√©sum√© des indicateurs cl√©s',
        template='plotly_dark',
        hover_data={'Valeur': ':,.2f'}
    )
    fig_summary.update_layout(font=dict(size=12), xaxis_tickangle=45, showlegend=False)
    fig_summary.update_traces(texttemplate='%{text:.2s}', textposition='auto')
    st.plotly_chart(fig_summary, use_container_width=True)
st.write("""
**Insights cl√©s :**
- üí∞ **D√©penses √©lev√©es** : La cat√©gorie principale repr√©sente une part significative des co√ªts. Envisagez des n√©gociations group√©es.
- üöö **Fournisseurs cl√©s** : Quelques fournisseurs dominent les commandes, surveillez les risques de d√©pendance.
- üì¶ **Articles prioritaires** : Les articles les plus demand√©s doivent √™tre stock√©s pour √©viter les ruptures.
- üìà **Pr√©visions** : Planifiez les stocks selon les quantit√©s pr√©vues pour les 6 prochains mois.
- üîé **Anomalies** : Toute d√©pense inhabituelle doit √™tre v√©rifi√©e pour √©viter les erreurs ou fraudes.

**Recommandations :**
- ü§ù N√©gocier avec les fournisseurs cl√©s pour optimiser les co√ªts.
- üìÖ Planifier les stocks en fonction des pr√©visions de demande.
- ‚ö° Simplifier le processus d'approbation pour r√©duire les d√©lais.
- üîç Investiguer les anomalies pour garantir l'int√©grit√© des achats.
""")

word_buffer = generate_word_document(selected_category, viz_data)
st.download_button(
    label="üìù T√©l√©charger la documentation (Word)",
    data=word_buffer,
    file_name="Documentation_Tableau_de_Bord_Achats.docx",
    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    key="download_docx"
)